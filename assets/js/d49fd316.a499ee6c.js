"use strict";(self.webpackChunkdocusaurus_tsx=self.webpackChunkdocusaurus_tsx||[]).push([[2492],{2879:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>i,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var n=t(4848),r=t(8453);const o={},l="How can I create custom on-the-fly data transforms?",a={id:"FAQ/custom_transforms",title:"How can I create custom on-the-fly data transforms?",description:"The code is easily extendable with custom transforms inheriting from the Transform base class.",source:"@site/docs/FAQ/custom_transforms.md",sourceDirName:"FAQ",slug:"/FAQ/custom_transforms",permalink:"/eole/docs/FAQ/custom_transforms",draft:!1,unlisted:!1,editUrl:"https://github.com/eole-nlp/eole/tree/main/docs/docs/FAQ/custom_transforms.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Frequently Asked Questions",permalink:"/eole/docs/category/frequently-asked-questions"},next:{title:"Do you support multi-gpu?",permalink:"/eole/docs/FAQ/distributed"}},i={},c=[];function d(e){const s={code:"code",h1:"h1",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h1,{id:"how-can-i-create-custom-on-the-fly-data-transforms",children:"How can I create custom on-the-fly data transforms?"}),"\n",(0,n.jsxs)(s.p,{children:["The code is easily extendable with custom transforms inheriting from the ",(0,n.jsx)(s.code,{children:"Transform"})," base class."]}),"\n",(0,n.jsxs)(s.p,{children:["You can for instance have a look at the ",(0,n.jsx)(s.code,{children:"FilterTooLongTransform"})," class as a template:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:'@register_transform(name=\'filtertoolong\')\nclass FilterTooLongTransform(Transform):\n    """Filter out sentence that are too long."""\n\n    @classmethod\n    def add_options(cls, parser):\n        """Avalilable options relate to this Transform."""\n        group = parser.add_argument_group("Transform/Filter")\n        group.add("--src_seq_length", "-src_seq_length", type=int, default=200,\n                  help="Maximum source sequence length.")\n        group.add("--tgt_seq_length", "-tgt_seq_length", type=int, default=200,\n                  help="Maximum target sequence length.")\n\n    def _parse_opts(self):\n        self.src_seq_length = self.opts.src_seq_length\n        self.tgt_seq_length = self.opts.tgt_seq_length\n\n    def apply(self, example, is_train=False, stats=None, **kwargs):\n        """Return None if too long else return as is."""\n        if (len(example[\'src\']) > self.src_seq_length or\n                len(example[\'tgt\']) > self.tgt_seq_length):\n            if stats is not None:\n                stats.update(FilterTooLongStats())\n            return None\n        else:\n            return example\n\n    def _repr_args(self):\n        """Return str represent key arguments for class."""\n        return \'{}={}, {}={}\'.format(\n            \'src_seq_length\', self.src_seq_length,\n            \'tgt_seq_length\', self.tgt_seq_length\n        )\n'})}),"\n",(0,n.jsx)(s.p,{children:"Methods:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"add_options"})," allows to add custom options that would be necessary for the transform configuration;"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"_parse_opts"})," allows to parse options introduced in ",(0,n.jsx)(s.code,{children:"add_options"})," when initialize;"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"apply"})," is where the transform happens;"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.code,{children:"_repr_args"})," is for clean logging purposes."]}),"\n"]}),"\n",(0,n.jsxs)(s.p,{children:["As you can see, there is the ",(0,n.jsx)(s.code,{children:"@register_transform"})," wrapper before the class definition. This will allow for the class to be automatically detected (if put in the proper ",(0,n.jsx)(s.code,{children:"transforms"})," folder) and usable in your training configurations through its ",(0,n.jsx)(s.code,{children:"name"})," argument."]}),"\n",(0,n.jsxs)(s.p,{children:["You could also collect statistics for your custom transform by creating a class inheriting ",(0,n.jsx)(s.code,{children:"ObservableStats"}),":"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-python",children:'class FilterTooLongStats(ObservableStats):\n    """Runing statistics for FilterTooLongTransform."""\n    __slots__ = ["filtered"]\n\n    def __init__(self):\n        self.filtered = 1\n\n    def update(self, other: "FilterTooLongStats"):\n        self.filtered += other.filtered\n'})}),"\n",(0,n.jsx)(s.p,{children:"NOTE:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["Add elements to keep track in the ",(0,n.jsx)(s.code,{children:"__init__"})," and also ",(0,n.jsx)(s.code,{children:"__slot__"})," to make it lightweight;"]}),"\n",(0,n.jsxs)(s.li,{children:["Supply update logic in ",(0,n.jsx)(s.code,{children:"update"})," method;"]}),"\n",(0,n.jsxs)(s.li,{children:["(Optional) override ",(0,n.jsx)(s.code,{children:"__str__"})," to change default log message format;"]}),"\n",(0,n.jsxs)(s.li,{children:["Instantiate and passing the statistic object in the ",(0,n.jsx)(s.code,{children:"apply"})," method of the corresponding transform class;"]}),"\n",(0,n.jsx)(s.li,{children:"statistics will be gathered per corpus per worker, but only first worker will report for its shard by default."}),"\n"]}),"\n",(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:"example"})," argument of ",(0,n.jsx)(s.code,{children:"apply"})," is a ",(0,n.jsx)(s.code,{children:"dict"})," of the form:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:'{\n\t"src": <source string>,\n\t"tgt": <target string>,\n\t"align": <alignment pharaoh string> # optional\n}\n'})}),"\n",(0,n.jsxs)(s.p,{children:["This is defined in ",(0,n.jsx)(s.code,{children:"onmt.inputters.corpus.ParallelCorpus.load"}),". This class is not easily extendable for now but it can be considered for future developments. For instance, we could create some ",(0,n.jsx)(s.code,{children:"CustomParallelCorpus"})," class that would handle other kind of inputs."]})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,s,t)=>{t.d(s,{R:()=>l,x:()=>a});var n=t(6540);const r={},o=n.createContext(r);function l(e){const s=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),n.createElement(o.Provider,{value:s},e.children)}}}]);