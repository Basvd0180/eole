"use strict";(self.webpackChunkdocusaurus_tsx=self.webpackChunkdocusaurus_tsx||[]).push([[5616],{5666:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var o=t(4848),r=t(8453);const s={sidebar_position:1,description:"Crash course on Eole configuration."},a="Configuration",i={id:"concepts/config",title:"Configuration",description:"Crash course on Eole configuration.",source:"@site/docs/concepts/config.md",sourceDirName:"concepts",slug:"/concepts/config",permalink:"/eole/docs/concepts/config",draft:!1,unlisted:!1,editUrl:"https://github.com/eole-nlp/eole/tree/main/docs/docs/concepts/config.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"Crash course on Eole configuration."},sidebar:"tutorialSidebar",previous:{title:"Key Concepts",permalink:"/eole/docs/category/key-concepts"},next:{title:"Command Line",permalink:"/eole/docs/concepts/command_line"}},c={},d=[];function l(n){const e={code:"code",h1:"h1",p:"p",pre:"pre",...(0,r.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{id:"configuration",children:"Configuration"}),"\n",(0,o.jsx)(e.p,{children:"One of the core principles around Eole is the structured configuration logic via Pydantic models. This allows for centralized validation of numerous parameters, as well as proper nesting of various objects and scopes.\nIt can be a lot at first, but that's a necessary evil for proper structure and modularity."}),"\n",(0,o.jsx)(e.p,{children:"Here is an example configuration to train a GPT-style language model:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-yaml",children:'# General data/vocab/run related settings\nseed: 42\nsave_data: test_save_data\nsrc_vocab_size: 60000\ntgt_vocab_size: 60000\nshare_vocab: true\nsrc_vocab: my_vocab.txt\nreport_every: 100 # report stats every 100 steps\n\n# datasets\ndata:\n    # training sets can be numerous, and named anything\n    corpus_1:\n        path_src: my_training_set.txt\n    # single validation set, always named "valid"\n    valid:\n        path_src: my_validation_set.txt\n\n# default transforms, in application order\ntransforms: [onmt_tokenize, filtertoolong]\n# transforms configuration\ntransforms_configs:\n  onmt_tokenize:\n    src_subword_type: bpe\n    src_subword_model: my_subwords_model.bpe\n    src_onmttok_kwargs: {"mode": "aggressive", "joiner_annotate": True, "preserve_placeholders":\n    True, "case_markup": True, "soft_case_regions": True, "preserve_segmented_tokens":\n    True}\n  filtertoolong:\n    src_seq_length: 512\n    tgt_seq_length: 512\n\n# model architecture configuration\nmodel:\n    architecture: "transformer_lm"\n    layers: 6\n    heads: 8\n    hidden_size: 512\n    transformer_ff: 2048\n    embeddings:\n        word_vec_size: 512\n        position_encoding: true\n\n# training routine configuration\ntraining:\n    # Train on a single GPU\n    world_size: 1\n    gpu_ranks: [0]\n    # Batching\n    batch_size: 2048\n    batch_type: tokens\n    # Optimizer\n    model_dtype: "fp32"\n    optim: "adam"\n    learning_rate: 2\n    warmup_steps: 8000\n    decay_method: "noam"\n    adam_beta2: 0.998\n    # Hyperparams\n    dropout_steps: [0]\n    dropout: [0.1]\n    attention_dropout: [0.1]\n    max_grad_norm: 0\n    label_smoothing: 0.1\n    param_init: 0\n    param_init_glorot: true\n    normalization: "tokens"\n    # Where to save the checkpoints (creates a directory)\n    model_path: my_model\n    # Steps intervals\n    save_checkpoint_steps: 10\n    train_steps: 50\n    valid_steps: 500\n'})})]})}function p(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(l,{...n})}):l(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>i});var o=t(6540);const r={},s=o.createContext(r);function a(n){const e=o.useContext(s);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:a(n.components),o.createElement(s.Provider,{value:e},n.children)}}}]);